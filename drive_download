{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "torrent_downloader.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/stevvv/covid-19/blob/master/drive_download\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yT6JeiW5ktuK",
        "colab_type": "text"
      },
      "source": [
        "## Setup the Google drive permissions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wu56njZqkxXg",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "4c4086d5-a8ec-4576-86f3-6d49860eb5f1"
      },
      "source": [
        "# Click this box, then click on the output link of this box. Sign in with google account to access your drive. Lastly enter the access code in ths bar\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\")"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4s6CnSTylCRk",
        "colab_type": "text"
      },
      "source": [
        "## Start\n",
        "### Enter the magnet link of torrent in the input box or put the .torrent files in tor folder of the your drive ( create the folder if it doesn't exist)\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l8ofif-OlEKw",
        "colab_type": "code",
        "cellView": "both",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "c1d9c9cb-4922-40c3-e329-40660981a5ce"
      },
      "source": [
        "#@title Torrent Class\n",
        "!apt install python3-libtorrent\n",
        "!pip install termcolor\n",
        " \n",
        "import libtorrent as lt\n",
        "from queue import Queue\n",
        "from threading import Thread\n",
        "from time import time\n",
        "import os\n",
        "import datetime\n",
        "from IPython.display import display\n",
        "from IPython.display import clear_output\n",
        "import ipywidgets as widgets\n",
        "from tqdm.notebook import tqdm\n",
        " \n",
        " \n",
        " \n",
        "from google.colab import drive\n",
        "drive.mount(\"/content/drive\")\n",
        " \n",
        "from google.colab import files\n",
        "from termcolor import cprint\n",
        " \n",
        "## Importing Libtorrents\n",
        "import libtorrent as lt\n",
        "import time\n",
        "import datetime\n",
        " \n",
        " \n",
        "tor_path = '/content/drive/My Drive/Torrent/tor/'\n",
        "save_path = '/content/drive/My Drive/Torrent/'\n",
        "completed_path = '/content/drive/My Drive/Torrent/aMovies/'\n",
        "\n",
        "for path in [tor_path, save_path, completed_path]:\n",
        " if not os.path.exists(path):\n",
        "\t  os.makedirs(path)\n",
        "\n",
        "# define the session of libtorrent\n",
        "ses = lt.session()\n",
        "ses.listen_on(6881, 6891)\n",
        "sett = lt.session_settings()\n",
        "sett = {'allow_multiple_connections_per_ip': True,\n",
        "        'dont_count_slow_torrents': True,\n",
        "        'active_downloads': 10,\n",
        "        'active_seeds': 4,\n",
        "        'active_checking': 3, }\n",
        "ses.set_settings(sett)\n",
        " \n",
        "# Gui\n",
        "layout = widgets.Layout(width=\"auto\")\n",
        "style = {\"description_width\": \"initial\"}\n",
        " \n",
        " \n",
        " \n",
        "class Torrent(Thread):\n",
        "    state_str = [\n",
        "        \"Queued\",\n",
        "        \"Checking\",\n",
        "        \"Downloading Metadata\",\n",
        "        \"Downloading\",\n",
        "        \"Finished\",\n",
        "        \"Seeding\",\n",
        "        \"Allocating\",\n",
        "        \"Checking Fastresume\",\n",
        "    ]\n",
        "    tor_paths = {}  # Keeps the track of which torrents are running and which are not\n",
        "    tor_file_status = {}\n",
        "    STORAGE_SIZE = 65\n",
        "    current_torrent_size = 0\n",
        "    timestamp = 0\n",
        "    torrent_progress= {}\n",
        " \n",
        "    def __init__(self):\n",
        "        print(\"got here\")\n",
        "        Thread.__init__(self)\n",
        "        print(\"Thread class initalized\")\n",
        " \n",
        " \n",
        " \n",
        "    def run(self):\n",
        "        self.magnets()\n",
        " \n",
        "    # Get the torrents from magnet links\n",
        "    def magnets(self):\n",
        "        params = {\n",
        "            'save_path': save_path,\n",
        "            'storage_mode': lt.storage_mode_t(2),\n",
        "            'paused': False,\n",
        "            'auto_managed': True,\n",
        "            'duplicate_is_error': True, \n",
        "            'file_priorities': [0] * 1000\n",
        "        }\n",
        "        magnet_link= ''\n",
        "        while True:\n",
        "            print(\"\\nEnter Magnet Link Or Type Exit: \")\n",
        "            magnet_link = input('\\n')\n",
        "            if magnet_link.lower() == \"exit\":\n",
        "                break\n",
        "            # if not magent.link.lower().startswith('magnet'): continue\n",
        "            # print(magnet_link)\n",
        "            # print(type(ses),type(magnet_link), type(params))\n",
        "            # params['uri'] = lt.add_magnet_uri(ses, magnet_link, params)\n",
        "            handle = lt.add_magnet_uri(ses, magnet_link, params)\n",
        "            # handle = ses.add_torrent(params)\n",
        "            self.tor_file_status[handle] = False\n",
        "            cprint('Magnet link added {}'.format(len(self.tor_file_status)),'green')\n",
        " \n",
        "    def add_torrent(self, link):\n",
        "        # print(link)\n",
        "        ti = lt.torrent_info(tor_path+link)\n",
        "        torrent_size = ti.total_size() / (1024 * 1024 * 1024)\n",
        " \n",
        "        if torrent_size > self.STORAGE_SIZE:\n",
        "            if not os.path.exists(tor_path + 'oversized_torrent/'):\n",
        "                os.makedirs(tor_path + 'oversized_torrent/')\n",
        "            os.replace(tor_path+link, tor_path + 'oversized_torrent/' + link.split('/')[-1])\n",
        "            # try:\n",
        "            #   ses.remove_torrent(torrent)\n",
        "            # except:\n",
        "            #   pass\n",
        "            return True\n",
        " \n",
        "        # If system can't accommodate more torrent, then dont add the param to the torrent\n",
        "        if self.current_torrent_size + torrent_size > self.STORAGE_SIZE:\n",
        "            new_timestamp = ts = datetime.datetime.now().timestamp() + (self.current_torrent_size + torrent_size - self.STORAGE_SIZE) * 100\n",
        "            \n",
        "            if self.timestamp == 0: \n",
        "                self.timestamp = new_timestamp\n",
        "            \n",
        "            self.timestamp = min(new_timestamp, self.timestamp)\n",
        "            return False\n",
        " \n",
        "        # else add the torrent to session\n",
        "        params = {\n",
        "            'save_path': save_path,\n",
        "            'storage_mode': lt.storage_mode_t(2),\n",
        "            'paused': False,\n",
        "            'auto_managed': True,\n",
        "            'duplicate_is_error': True,\n",
        "            'ti': ti\n",
        "        }\n",
        " \n",
        "        try:\n",
        "            self.current_torrent_size += torrent_size\n",
        "            ses.async_add_torrent(params)\n",
        "            print('Added ', link.split('/')[-1])\n",
        "            self.current_torrent_size += torrent_size\n",
        "            # print(\"Torrent added !! \",link)\n",
        "        except RuntimeError as e:\n",
        "            cprint('!! Torrent already present', 'red')\n",
        "        return True\n",
        " \n",
        "    def load_torrents(self):\n",
        "        # get the tor files from the drive\n",
        "        paths = os.listdir(tor_path)\n",
        "        paths = [path for path in paths if path.endswith('.torrent')]\n",
        "        # print(paths)\n",
        "        # print(self.tor_paths)\n",
        " \n",
        "        for path in paths:\n",
        "            if path not in self.tor_paths.keys():\n",
        "                self.tor_paths[path] = False\n",
        " \n",
        "        # Adding torrents from drive  to the list\n",
        "        for tor, status in dict(self.tor_paths).items():\n",
        "            if not status:\n",
        "                self.tor_paths[tor] = self.add_torrent(tor)\n",
        " \n",
        "    def check(self):\n",
        "        # clear_output()\n",
        "        cprint('\\n'+('-' * 60))\n",
        "        for torrent in ses.get_torrents():\n",
        "            s = torrent.status()\n",
        " \n",
        "            if self.state_str[s.state] in [\"Allocating\", \"Downloading Metadata\"]:\n",
        "              print(torrent.name(),'is',self.state_str[s.state])\n",
        "              continue\n",
        "            \n",
        "            if not torrent.has_metadata():\n",
        "              continue\n",
        " \n",
        "            print(torrent.name())\n",
        "            cprint('{:.2f}% of {:.2f}GB ( down: {:.1f} mb/s  up: {:.1f} kB/s peers: {:d}) {} \\n'.format(\n",
        "                s.progress * 100, torrent.get_torrent_info().total_size() / (1024 * 1024 * 1024),\n",
        "                s.download_rate / 1000000,\n",
        "                s.upload_rate / 1000, s.num_peers, self.state_str[s.state]), 'magenta', 'on_white',attrs=['bold'])\n",
        " \n",
        "            if (torrent.file_priority(0) == 0):\n",
        "                ses.remove_torrent(torrent)\n",
        "                print('Metadata downloaded for ', torrent.name())\n",
        " \n",
        " \n",
        "            # If torrent is seeding, then move it to new location and remove it from session\n",
        "            if (torrent.is_seed()):\n",
        "                # print(torrent.save_path())\n",
        " \n",
        "                # In case of only metadata downloading magnetic link, remove only torrent handle\n",
        "                print('Checking !!')\n",
        "                torrent_size = torrent.get_torrent_info().total_size() / (1024 * 1024 * 1024) # Get the size for total size\n",
        "                torrent.move_storage(completed_path)\n",
        "                torrent.force_recheck()\n",
        "                print(\"Checking Done\")\n",
        " \n",
        "                # while not torrent.is_seed():\n",
        "                os.remove(os.path.join(tor_path, torrent.name() + \".torrent\"))\n",
        "                # torrent_size = torrent.total_size() / (1024 * 1024 * 1024)\n",
        "                self.current_torrent_size -= torrent_size\n",
        "                ses.remove_torrent(torrent)\n",
        "        # while (True):\n",
        "        #     fast_check()\n",
        "        #     print()\n",
        "        #     if len(ses.get_torrents()) == 0:\n",
        "        #         exit()\n",
        "        #     time.sleep(60)\n",
        " \n",
        "    ## Saves the torrent as .tor files\n",
        "    def save_tor_file(self, torrent):\n",
        "        # print(1, torrent.name(), torrent.has_metadata())\n",
        "        if not torrent.has_metadata():\n",
        "            return False\n",
        " \n",
        "        if os.path.exists(os.path.join(tor_path, torrent.name() + \".torrent\")): return True\n",
        " \n",
        "        torrent_info = torrent.get_torrent_info()\n",
        "        torrent_file = lt.create_torrent(torrent_info)\n",
        "        torrent_path = os.path.join(tor_path, torrent.name() + \".torrent\")\n",
        "        with open(torrent_path, \"wb\") as f:\n",
        "            f.write(lt.bencode(torrent_file.generate()))\n",
        "        print('tor file created: ', torrent_path, '\\n')\n",
        "        ses.remove_torrent(torrent)\n",
        "        print([t.name() for t in ses.get_torrents()])\n",
        "        return True\n",
        " \n",
        "    def gui_check(self):\n",
        "        # clear_output()\n",
        "        # cprint('\\n'+('-' * 60))\n",
        "        for torrent in ses.get_torrents():\n",
        "            s = torrent.status()\n",
        " \n",
        " \n",
        " \n",
        "            if self.state_str[s.state] in [\"Allocating\", \"Downloading Metadata\"]:\n",
        "              print(torrent.name(),'is',self.state_str[s.state])\n",
        "              continue\n",
        "            \n",
        "            if not torrent.has_metadata():\n",
        "              continue\n",
        " \n",
        "            # tqdm progress bar\n",
        "            if torrent in self.torrent_progress.keys():\n",
        "                bar = self.torrent_progress[torrent]\n",
        "                # bar.unpause()\n",
        "                \n",
        " \n",
        "                # bar.display(msg=torrent.name(), close=True)\n",
        "                bar.write(torrent.name(), end='\\n', nolock=False)\n",
        " \n",
        "                bar.reset()\n",
        "                bar.n = round(s.progress*torrent.get_torrent_info().total_size() / (1024 * 1024 * 1024), 2)\n",
        "                bar.last_print_n = round(s.progress*torrent.get_torrent_info().total_size() / (1024 * 1024 * 1024), 2)\n",
        "                bar.desc=\" | \".join( [ torrent.name()[:40],\n",
        "                            self.state_str[s.state], \n",
        "                            ])\n",
        "                \n",
        "                d = {'down':str(round(s.download_rate / 1000000, 1))+'mb/s', 'up':str(round(s.upload_rate / 1000,1))+'kb/s', 'peers':s.num_peers}\n",
        "                bar.set_postfix(d)\n",
        "                bar.refresh()\n",
        "                # bar.pause()\n",
        "            \n",
        "            else:  \n",
        "                self.torrent_progress[torrent] = tqdm(total=round(torrent.get_torrent_info().total_size() / (1024 * 1024 * 1024),2),\n",
        "                                                      dynamic_ncols=True,\n",
        "                                                      unit = 'mb',\n",
        "                                                      desc=\" | \".join( [ torrent.name()[:40],\n",
        "                                                                  self.state_str[s.state], \n",
        "                                                                 ]),\n",
        "                                                      postfix={}\n",
        " \n",
        "                                                 )\n",
        " \n",
        "            # print(self.torrent_progress)\n",
        "            # print(torrent.name())\n",
        "            # cprint('{:.2f}% of {:.2f}GB ( down: {:.1f} mb/s  up: {:.1f} kB/s peers: {:d}) {} \\n'.format(\n",
        "            #     s.progress * 100, torrent.get_torrent_info().total_size() / (1024 * 1024 * 1024),\n",
        "            #     s.download_rate / 1000000,\n",
        "            #     s.upload_rate / 1000, s.num_peers, self.state_str[s.state]), 'magenta', 'on_white',attrs=['bold'])\n",
        " \n",
        "            if (torrent.file_priority(0) == 0):\n",
        "                ses.remove_torrent(torrent)\n",
        "                print('Metadata downloaded for ', torrent.name())\n",
        " \n",
        " \n",
        "            # If torrent is seeding, then move it to new location and remove it from session\n",
        "            if (torrent.is_seed()):\n",
        "                # print(torrent.save_path())\n",
        " \n",
        "                # In case of only metadata downloading magnetic link, remove only torrent handle\n",
        "                print('Checking !!')\n",
        "                torrent.move_storage(completed_path)\n",
        "                torrent.force_recheck()\n",
        "                print(\"Checking Done\")\n",
        " \n",
        "                if torrent.is_seed:\n",
        "                    os.remove(os.path.join(tor_path, torrent.name() + \".torrent\"))\n",
        "                    ses.remove_torrent(torrent)\n",
        "                    \n",
        " \n",
        " \n",
        "    def status_check(self):\n",
        " \n",
        "        while True:\n",
        "            # Regular checking and status printing\n",
        "            self.check()\n",
        " \n",
        "            # Load awaiting torrents\n",
        "            if datetime.datetime.now().timestamp() > self.timestamp:\n",
        "                # print('Part 1')\n",
        "                t.load_torrents()\n",
        "                # print(self.tor_paths)\n",
        " \n",
        "            # Download tor files for awaiting torrents\n",
        "            if len(self.tor_file_status) != 0:\n",
        "                # print('Part 2')\n",
        "                for torrent, status in dict(self.tor_file_status).items():\n",
        "                    if status:\n",
        "                        del self.tor_file_status[torrent]\n",
        "                    else:\n",
        "                        self.tor_file_status[torrent] = self.save_tor_file(torrent)\n",
        "            time.sleep(200)\n",
        "            if len(ses.get_torrents()) == 0:\n",
        "              exit(0)\n",
        " \n",
        "t = Torrent()\n",
        "t.daemon = True\n",
        "t.start()\n",
        " \n",
        "# display(*download_bars)\n",
        "t.status_check()\n",
        "# t.magnets()\n",
        " \n",
        "t.join()\n",
        "exit()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Reading package lists... Done\n",
            "Building dependency tree       \n",
            "Reading state information... Done\n",
            "The following package was automatically installed and is no longer required:\n",
            "  libnvidia-common-440\n",
            "Use 'apt autoremove' to remove it.\n",
            "The following additional packages will be installed:\n",
            "  libtorrent-rasterbar9\n",
            "Suggested packages:\n",
            "  libtorrent-rasterbar-dbg\n",
            "The following NEW packages will be installed:\n",
            "  libtorrent-rasterbar9 python3-libtorrent\n",
            "0 upgraded, 2 newly installed, 0 to remove and 39 not upgraded.\n",
            "Need to get 1,569 kB of archives.\n",
            "After this operation, 5,718 kB of additional disk space will be used.\n",
            "Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 libtorrent-rasterbar9 amd64 1.1.5-1build1 [1,258 kB]\n",
            "Get:2 http://archive.ubuntu.com/ubuntu bionic/universe amd64 python3-libtorrent amd64 1.1.5-1build1 [310 kB]\n",
            "Fetched 1,569 kB in 2s (690 kB/s)\n",
            "Selecting previously unselected package libtorrent-rasterbar9.\n",
            "(Reading database ... 144579 files and directories currently installed.)\n",
            "Preparing to unpack .../libtorrent-rasterbar9_1.1.5-1build1_amd64.deb ...\n",
            "Unpacking libtorrent-rasterbar9 (1.1.5-1build1) ...\n",
            "Selecting previously unselected package python3-libtorrent.\n",
            "Preparing to unpack .../python3-libtorrent_1.1.5-1build1_amd64.deb ...\n",
            "Unpacking python3-libtorrent (1.1.5-1build1) ...\n",
            "Setting up libtorrent-rasterbar9 (1.1.5-1build1) ...\n",
            "Setting up python3-libtorrent (1.1.5-1build1) ...\n",
            "Processing triggers for libc-bin (2.27-3ubuntu1) ...\n",
            "/sbin/ldconfig.real: /usr/local/lib/python3.6/dist-packages/ideep4py/lib/libmkldnn.so.0 is not a symbolic link\n",
            "\n",
            "Requirement already satisfied: termcolor in /usr/local/lib/python3.6/dist-packages (1.1.0)\n",
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "got here\n",
            "Thread class initalized\n",
            "\n",
            "Enter Magnet Link Or Type Exit: \n",
            "\n",
            "------------------------------------------------------------\u001b[0m\n",
            "\n",
            "magnet:?xt=urn:btih:2FFBEA7392ACAC374967DDF87AE369DCC74133C0&dn=Cargo+%282019%29+Hindi+720p+NF+WEBRip+-+1.2+GB+-+ESub+AAC+2CH+x264+-+Shadow+%28BonsaiHD%29&tr=udp%3A%2F%2Ftracker.coppersurfer.tk%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.cyberia.is%3A6969%2Fannounce&tr=udp%3A%2F%2F9.rarbg.me%3A2780%2Fannounce&tr=udp%3A%2F%2Fp4p.arenabg.com%3A1337%2Fannounce&tr=udp%3A%2F%2Fexplodie.org%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.opentrackr.org%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.tiny-vps.com%3A6969%2Fannounce&tr=udp%3A%2F%2Fexodus.desync.com%3A6969%2Fannounce&tr=udp%3A%2F%2Ftracker.torrent.eu.org%3A451%2Fannounce&tr=udp%3A%2F%2Ftracker.moeking.me%3A6969%2Fannounce&tr=udp%3A%2F%2Fipv4.tracker.harry.lu%3A80%2Fannounce&tr=udp%3A%2F%2Fopen.stealth.si%3A80%2Fannounce&tr=udp%3A%2F%2F9.rarbg.to%3A2710%2Fannounce&tr=udp%3A%2F%2Ftracker.zer0day.to%3A1337%2Fannounce&tr=udp%3A%2F%2Ftracker.leechers-paradise.org%3A6969%2Fannounce&tr=udp%3A%2F%2Fcoppersurfer.tk%3A6969%2Fannounce\n",
            "\u001b[32mMagnet link added 1\u001b[0m\n",
            "\n",
            "Enter Magnet Link Or Type Exit: \n",
            "\n",
            "exit\n",
            "\n",
            "------------------------------------------------------------\u001b[0m\n",
            "Cargo (2019) Hindi 720p NF WEBRip - 1.2 GB - ESub AAC 2CH x264 - Shadow (BonsaiHD)\n",
            "\u001b[1m\u001b[47m\u001b[35m9.43% of 1.24GB ( down: 1.8 mb/s  up: 100.0 kB/s peers: 106) Downloading \n",
            "\u001b[0m\n",
            "tor file created:  /content/drive/My Drive/Torrent/tor/Cargo (2019) Hindi 720p NF WEBRip - 1.2 GB - ESub AAC 2CH x264 - Shadow (BonsaiHD).torrent \n",
            "\n",
            "[]\n",
            "\n",
            "------------------------------------------------------------\u001b[0m\n",
            "Added  Cargo (2019) Hindi 720p NF WEBRip - 1.2 GB - ESub AAC 2CH x264 - Shadow (BonsaiHD).torrent\n",
            "\n",
            "------------------------------------------------------------\u001b[0m\n",
            "Cargo (2019) Hindi 720p NF WEBRip - 1.2 GB - ESub AAC 2CH x264 - Shadow (BonsaiHD)\n",
            "\u001b[1m\u001b[47m\u001b[35m47.32% of 1.24GB ( down: 4.1 mb/s  up: 137.6 kB/s peers: 116) Downloading \n",
            "\u001b[0m\n",
            "\n",
            "------------------------------------------------------------\u001b[0m\n",
            "Cargo (2019) Hindi 720p NF WEBRip - 1.2 GB - ESub AAC 2CH x264 - Shadow (BonsaiHD)\n",
            "\u001b[1m\u001b[47m\u001b[35m86.08% of 1.24GB ( down: 2.2 mb/s  up: 105.9 kB/s peers: 132) Downloading \n",
            "\u001b[0m\n",
            "\n",
            "------------------------------------------------------------\u001b[0m\n",
            "Cargo (2019) Hindi 720p NF WEBRip - 1.2 GB - ESub AAC 2CH x264 - Shadow (BonsaiHD)\n",
            "\u001b[1m\u001b[47m\u001b[35m100.00% of 1.24GB ( down: 0.0 mb/s  up: 119.0 kB/s peers: 75) Seeding \n",
            "\u001b[0m\n",
            "Checking !!\n",
            "Checking Done\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}